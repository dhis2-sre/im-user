// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package di

import (
	"github.com/dhis2-sre/im-users/internal/middleware"
	"github.com/dhis2-sre/im-users/pgk/config"
	"github.com/dhis2-sre/im-users/pgk/group"
	"github.com/dhis2-sre/im-users/pgk/storage"
	"github.com/dhis2-sre/im-users/pgk/token"
	"github.com/dhis2-sre/im-users/pgk/user"
	"gorm.io/gorm"
	"log"
)

// Injectors from wire.go:

func GetEnvironment() Environment {
	configConfig := config.ProvideConfig()
	db := provideDatabase(configConfig)
	repository := user.ProvideRepository(db)
	service := user.ProvideService(repository)
	client := storage.ProvideRedis(configConfig)
	tokenRepository := token.ProvideTokenRepository(client)
	tokenService := token.ProvideTokenService(configConfig, tokenRepository)
	handler := user.ProvideHandler(configConfig, service, tokenService)
	groupRepository := group.ProvideRepository(db)
	groupService := group.ProvideService(groupRepository, repository)
	groupHandler := group.ProvideHandler(groupService, service)
	authenticationMiddleware := middleware.ProvideAuthentication(service, tokenService)
	authorizationMiddleware := middleware.ProvideAuthorization(service)
	environment := ProvideEnvironment(configConfig, service, handler, groupService, groupHandler, authenticationMiddleware, authorizationMiddleware)
	return environment
}

// wire.go:

type Environment struct {
	Config                   config.Config
	UserService              user.Service
	UserHandler              user.Handler
	GroupService             group.Service
	GroupHandler             group.Handler
	AuthenticationMiddleware middleware.AuthenticationMiddleware
	AuthorizationMiddleware  middleware.AuthorizationMiddleware
}

func ProvideEnvironment(config2 config.Config,

	userService user.Service,
	userHandler user.Handler,
	groupService group.Service,
	groupHandler group.Handler,
	authenticationMiddleware middleware.AuthenticationMiddleware,
	authorizationMiddleware middleware.AuthorizationMiddleware,
) Environment {
	return Environment{config2, userService,
		userHandler,
		groupService,
		groupHandler,
		authenticationMiddleware,
		authorizationMiddleware,
	}
}

func provideDatabase(c config.Config) *gorm.DB {
	database, err := storage.ProvideDatabase(c)
	if err != nil {
		log.Fatalln(err)
	}
	return database
}
