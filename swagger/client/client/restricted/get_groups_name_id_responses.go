// Code generated by go-swagger; DO NOT EDIT.

package restricted

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetGroupsNameIDReader is a Reader for the GetGroupsNameID structure.
type GetGroupsNameIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGroupsNameIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGroupsNameIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetGroupsNameIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetGroupsNameIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGroupsNameIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetGroupsNameIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetGroupsNameIDOK creates a GetGroupsNameIDOK with default headers values
func NewGetGroupsNameIDOK() *GetGroupsNameIDOK {
	return &GetGroupsNameIDOK{}
}

/* GetGroupsNameIDOK describes a response with status code 200, with default header values.

OK
*/
type GetGroupsNameIDOK struct {
	Payload int64
}

func (o *GetGroupsNameIDOK) Error() string {
	return fmt.Sprintf("[GET /groups/{name}/id][%d] getGroupsNameIdOK  %+v", 200, o.Payload)
}
func (o *GetGroupsNameIDOK) GetPayload() int64 {
	return o.Payload
}

func (o *GetGroupsNameIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGroupsNameIDUnauthorized creates a GetGroupsNameIDUnauthorized with default headers values
func NewGetGroupsNameIDUnauthorized() *GetGroupsNameIDUnauthorized {
	return &GetGroupsNameIDUnauthorized{}
}

/* GetGroupsNameIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetGroupsNameIDUnauthorized struct {
	Payload interface{}
}

func (o *GetGroupsNameIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /groups/{name}/id][%d] getGroupsNameIdUnauthorized  %+v", 401, o.Payload)
}
func (o *GetGroupsNameIDUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *GetGroupsNameIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGroupsNameIDForbidden creates a GetGroupsNameIDForbidden with default headers values
func NewGetGroupsNameIDForbidden() *GetGroupsNameIDForbidden {
	return &GetGroupsNameIDForbidden{}
}

/* GetGroupsNameIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetGroupsNameIDForbidden struct {
	Payload interface{}
}

func (o *GetGroupsNameIDForbidden) Error() string {
	return fmt.Sprintf("[GET /groups/{name}/id][%d] getGroupsNameIdForbidden  %+v", 403, o.Payload)
}
func (o *GetGroupsNameIDForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *GetGroupsNameIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGroupsNameIDNotFound creates a GetGroupsNameIDNotFound with default headers values
func NewGetGroupsNameIDNotFound() *GetGroupsNameIDNotFound {
	return &GetGroupsNameIDNotFound{}
}

/* GetGroupsNameIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetGroupsNameIDNotFound struct {
	Payload string
}

func (o *GetGroupsNameIDNotFound) Error() string {
	return fmt.Sprintf("[GET /groups/{name}/id][%d] getGroupsNameIdNotFound  %+v", 404, o.Payload)
}
func (o *GetGroupsNameIDNotFound) GetPayload() string {
	return o.Payload
}

func (o *GetGroupsNameIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGroupsNameIDUnsupportedMediaType creates a GetGroupsNameIDUnsupportedMediaType with default headers values
func NewGetGroupsNameIDUnsupportedMediaType() *GetGroupsNameIDUnsupportedMediaType {
	return &GetGroupsNameIDUnsupportedMediaType{}
}

/* GetGroupsNameIDUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type
*/
type GetGroupsNameIDUnsupportedMediaType struct {
	Payload interface{}
}

func (o *GetGroupsNameIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /groups/{name}/id][%d] getGroupsNameIdUnsupportedMediaType  %+v", 415, o.Payload)
}
func (o *GetGroupsNameIDUnsupportedMediaType) GetPayload() interface{} {
	return o.Payload
}

func (o *GetGroupsNameIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
