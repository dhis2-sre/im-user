// Code generated by go-swagger; DO NOT EDIT.

package restricted

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetGroupsNameToIDNameReader is a Reader for the GetGroupsNameToIDName structure.
type GetGroupsNameToIDNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGroupsNameToIDNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGroupsNameToIDNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetGroupsNameToIDNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetGroupsNameToIDNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGroupsNameToIDNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetGroupsNameToIDNameUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetGroupsNameToIDNameOK creates a GetGroupsNameToIDNameOK with default headers values
func NewGetGroupsNameToIDNameOK() *GetGroupsNameToIDNameOK {
	return &GetGroupsNameToIDNameOK{}
}

/* GetGroupsNameToIDNameOK describes a response with status code 200, with default header values.

OK
*/
type GetGroupsNameToIDNameOK struct {
	Payload int64
}

func (o *GetGroupsNameToIDNameOK) Error() string {
	return fmt.Sprintf("[GET /groups-name-to-id/{name}][%d] getGroupsNameToIdNameOK  %+v", 200, o.Payload)
}
func (o *GetGroupsNameToIDNameOK) GetPayload() int64 {
	return o.Payload
}

func (o *GetGroupsNameToIDNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGroupsNameToIDNameUnauthorized creates a GetGroupsNameToIDNameUnauthorized with default headers values
func NewGetGroupsNameToIDNameUnauthorized() *GetGroupsNameToIDNameUnauthorized {
	return &GetGroupsNameToIDNameUnauthorized{}
}

/* GetGroupsNameToIDNameUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetGroupsNameToIDNameUnauthorized struct {
	Payload interface{}
}

func (o *GetGroupsNameToIDNameUnauthorized) Error() string {
	return fmt.Sprintf("[GET /groups-name-to-id/{name}][%d] getGroupsNameToIdNameUnauthorized  %+v", 401, o.Payload)
}
func (o *GetGroupsNameToIDNameUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *GetGroupsNameToIDNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGroupsNameToIDNameForbidden creates a GetGroupsNameToIDNameForbidden with default headers values
func NewGetGroupsNameToIDNameForbidden() *GetGroupsNameToIDNameForbidden {
	return &GetGroupsNameToIDNameForbidden{}
}

/* GetGroupsNameToIDNameForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetGroupsNameToIDNameForbidden struct {
	Payload interface{}
}

func (o *GetGroupsNameToIDNameForbidden) Error() string {
	return fmt.Sprintf("[GET /groups-name-to-id/{name}][%d] getGroupsNameToIdNameForbidden  %+v", 403, o.Payload)
}
func (o *GetGroupsNameToIDNameForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *GetGroupsNameToIDNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGroupsNameToIDNameNotFound creates a GetGroupsNameToIDNameNotFound with default headers values
func NewGetGroupsNameToIDNameNotFound() *GetGroupsNameToIDNameNotFound {
	return &GetGroupsNameToIDNameNotFound{}
}

/* GetGroupsNameToIDNameNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetGroupsNameToIDNameNotFound struct {
	Payload string
}

func (o *GetGroupsNameToIDNameNotFound) Error() string {
	return fmt.Sprintf("[GET /groups-name-to-id/{name}][%d] getGroupsNameToIdNameNotFound  %+v", 404, o.Payload)
}
func (o *GetGroupsNameToIDNameNotFound) GetPayload() string {
	return o.Payload
}

func (o *GetGroupsNameToIDNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGroupsNameToIDNameUnsupportedMediaType creates a GetGroupsNameToIDNameUnsupportedMediaType with default headers values
func NewGetGroupsNameToIDNameUnsupportedMediaType() *GetGroupsNameToIDNameUnsupportedMediaType {
	return &GetGroupsNameToIDNameUnsupportedMediaType{}
}

/* GetGroupsNameToIDNameUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type
*/
type GetGroupsNameToIDNameUnsupportedMediaType struct {
	Payload interface{}
}

func (o *GetGroupsNameToIDNameUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /groups-name-to-id/{name}][%d] getGroupsNameToIdNameUnsupportedMediaType  %+v", 415, o.Payload)
}
func (o *GetGroupsNameToIDNameUnsupportedMediaType) GetPayload() interface{} {
	return o.Payload
}

func (o *GetGroupsNameToIDNameUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
