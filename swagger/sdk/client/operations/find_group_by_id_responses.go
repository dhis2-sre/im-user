// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/dhis2-sre/im-user/swagger/sdk/models"
)

// FindGroupByIDReader is a Reader for the FindGroupByID structure.
type FindGroupByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindGroupByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindGroupByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewFindGroupByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFindGroupByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewFindGroupByIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFindGroupByIDOK creates a FindGroupByIDOK with default headers values
func NewFindGroupByIDOK() *FindGroupByIDOK {
	return &FindGroupByIDOK{}
}

/* FindGroupByIDOK describes a response with status code 200, with default header values.

Group
*/
type FindGroupByIDOK struct {
	Payload *models.Group
}

func (o *FindGroupByIDOK) Error() string {
	return fmt.Sprintf("[GET /groups/{id}][%d] findGroupByIdOK  %+v", 200, o.Payload)
}
func (o *FindGroupByIDOK) GetPayload() *models.Group {
	return o.Payload
}

func (o *FindGroupByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Group)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindGroupByIDForbidden creates a FindGroupByIDForbidden with default headers values
func NewFindGroupByIDForbidden() *FindGroupByIDForbidden {
	return &FindGroupByIDForbidden{}
}

/* FindGroupByIDForbidden describes a response with status code 403, with default header values.

FindGroupByIDForbidden find group by Id forbidden
*/
type FindGroupByIDForbidden struct {
}

func (o *FindGroupByIDForbidden) Error() string {
	return fmt.Sprintf("[GET /groups/{id}][%d] findGroupByIdForbidden ", 403)
}

func (o *FindGroupByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindGroupByIDNotFound creates a FindGroupByIDNotFound with default headers values
func NewFindGroupByIDNotFound() *FindGroupByIDNotFound {
	return &FindGroupByIDNotFound{}
}

/* FindGroupByIDNotFound describes a response with status code 404, with default header values.

FindGroupByIDNotFound find group by Id not found
*/
type FindGroupByIDNotFound struct {
}

func (o *FindGroupByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /groups/{id}][%d] findGroupByIdNotFound ", 404)
}

func (o *FindGroupByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindGroupByIDUnsupportedMediaType creates a FindGroupByIDUnsupportedMediaType with default headers values
func NewFindGroupByIDUnsupportedMediaType() *FindGroupByIDUnsupportedMediaType {
	return &FindGroupByIDUnsupportedMediaType{}
}

/* FindGroupByIDUnsupportedMediaType describes a response with status code 415, with default header values.

FindGroupByIDUnsupportedMediaType find group by Id unsupported media type
*/
type FindGroupByIDUnsupportedMediaType struct {
}

func (o *FindGroupByIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /groups/{id}][%d] findGroupByIdUnsupportedMediaType ", 415)
}

func (o *FindGroupByIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
