// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/dhis2-sre/im-users/swagger/sdk/models"
)

// GetUserByIDReader is a Reader for the GetUserByID structure.
type GetUserByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUserByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUserByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetUserByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetUserByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetUserByIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetUserByIDOK creates a GetUserByIDOK with default headers values
func NewGetUserByIDOK() *GetUserByIDOK {
	return &GetUserByIDOK{}
}

/* GetUserByIDOK describes a response with status code 200, with default header values.

User
*/
type GetUserByIDOK struct {
	Payload *models.User
}

func (o *GetUserByIDOK) Error() string {
	return fmt.Sprintf("[GET /findbyid/{id}][%d] getUserByIdOK  %+v", 200, o.Payload)
}
func (o *GetUserByIDOK) GetPayload() *models.User {
	return o.Payload
}

func (o *GetUserByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserByIDForbidden creates a GetUserByIDForbidden with default headers values
func NewGetUserByIDForbidden() *GetUserByIDForbidden {
	return &GetUserByIDForbidden{}
}

/* GetUserByIDForbidden describes a response with status code 403, with default header values.

GetUserByIDForbidden get user by Id forbidden
*/
type GetUserByIDForbidden struct {
}

func (o *GetUserByIDForbidden) Error() string {
	return fmt.Sprintf("[GET /findbyid/{id}][%d] getUserByIdForbidden ", 403)
}

func (o *GetUserByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetUserByIDNotFound creates a GetUserByIDNotFound with default headers values
func NewGetUserByIDNotFound() *GetUserByIDNotFound {
	return &GetUserByIDNotFound{}
}

/* GetUserByIDNotFound describes a response with status code 404, with default header values.

GetUserByIDNotFound get user by Id not found
*/
type GetUserByIDNotFound struct {
}

func (o *GetUserByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /findbyid/{id}][%d] getUserByIdNotFound ", 404)
}

func (o *GetUserByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetUserByIDUnsupportedMediaType creates a GetUserByIDUnsupportedMediaType with default headers values
func NewGetUserByIDUnsupportedMediaType() *GetUserByIDUnsupportedMediaType {
	return &GetUserByIDUnsupportedMediaType{}
}

/* GetUserByIDUnsupportedMediaType describes a response with status code 415, with default header values.

GetUserByIDUnsupportedMediaType get user by Id unsupported media type
*/
type GetUserByIDUnsupportedMediaType struct {
}

func (o *GetUserByIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /findbyid/{id}][%d] getUserByIdUnsupportedMediaType ", 415)
}

func (o *GetUserByIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
