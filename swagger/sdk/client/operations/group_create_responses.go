// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/dhis2-sre/im-user/swagger/sdk/models"
)

// GroupCreateReader is a Reader for the GroupCreate structure.
type GroupCreateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GroupCreateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewGroupCreateCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGroupCreateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGroupCreateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGroupCreateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGroupCreateUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGroupCreateCreated creates a GroupCreateCreated with default headers values
func NewGroupCreateCreated() *GroupCreateCreated {
	return &GroupCreateCreated{}
}

/* GroupCreateCreated describes a response with status code 201, with default header values.

Group
*/
type GroupCreateCreated struct {
	Payload *models.Group
}

// IsSuccess returns true when this group create created response has a 2xx status code
func (o *GroupCreateCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this group create created response has a 3xx status code
func (o *GroupCreateCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this group create created response has a 4xx status code
func (o *GroupCreateCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this group create created response has a 5xx status code
func (o *GroupCreateCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this group create created response a status code equal to that given
func (o *GroupCreateCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the group create created response
func (o *GroupCreateCreated) Code() int {
	return 201
}

func (o *GroupCreateCreated) Error() string {
	return fmt.Sprintf("[POST /groups][%d] groupCreateCreated  %+v", 201, o.Payload)
}

func (o *GroupCreateCreated) String() string {
	return fmt.Sprintf("[POST /groups][%d] groupCreateCreated  %+v", 201, o.Payload)
}

func (o *GroupCreateCreated) GetPayload() *models.Group {
	return o.Payload
}

func (o *GroupCreateCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Group)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGroupCreateBadRequest creates a GroupCreateBadRequest with default headers values
func NewGroupCreateBadRequest() *GroupCreateBadRequest {
	return &GroupCreateBadRequest{}
}

/* GroupCreateBadRequest describes a response with status code 400, with default header values.

GroupCreateBadRequest group create bad request
*/
type GroupCreateBadRequest struct {
}

// IsSuccess returns true when this group create bad request response has a 2xx status code
func (o *GroupCreateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this group create bad request response has a 3xx status code
func (o *GroupCreateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this group create bad request response has a 4xx status code
func (o *GroupCreateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this group create bad request response has a 5xx status code
func (o *GroupCreateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this group create bad request response a status code equal to that given
func (o *GroupCreateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the group create bad request response
func (o *GroupCreateBadRequest) Code() int {
	return 400
}

func (o *GroupCreateBadRequest) Error() string {
	return fmt.Sprintf("[POST /groups][%d] groupCreateBadRequest ", 400)
}

func (o *GroupCreateBadRequest) String() string {
	return fmt.Sprintf("[POST /groups][%d] groupCreateBadRequest ", 400)
}

func (o *GroupCreateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGroupCreateUnauthorized creates a GroupCreateUnauthorized with default headers values
func NewGroupCreateUnauthorized() *GroupCreateUnauthorized {
	return &GroupCreateUnauthorized{}
}

/* GroupCreateUnauthorized describes a response with status code 401, with default header values.

GroupCreateUnauthorized group create unauthorized
*/
type GroupCreateUnauthorized struct {
}

// IsSuccess returns true when this group create unauthorized response has a 2xx status code
func (o *GroupCreateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this group create unauthorized response has a 3xx status code
func (o *GroupCreateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this group create unauthorized response has a 4xx status code
func (o *GroupCreateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this group create unauthorized response has a 5xx status code
func (o *GroupCreateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this group create unauthorized response a status code equal to that given
func (o *GroupCreateUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the group create unauthorized response
func (o *GroupCreateUnauthorized) Code() int {
	return 401
}

func (o *GroupCreateUnauthorized) Error() string {
	return fmt.Sprintf("[POST /groups][%d] groupCreateUnauthorized ", 401)
}

func (o *GroupCreateUnauthorized) String() string {
	return fmt.Sprintf("[POST /groups][%d] groupCreateUnauthorized ", 401)
}

func (o *GroupCreateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGroupCreateForbidden creates a GroupCreateForbidden with default headers values
func NewGroupCreateForbidden() *GroupCreateForbidden {
	return &GroupCreateForbidden{}
}

/* GroupCreateForbidden describes a response with status code 403, with default header values.

GroupCreateForbidden group create forbidden
*/
type GroupCreateForbidden struct {
}

// IsSuccess returns true when this group create forbidden response has a 2xx status code
func (o *GroupCreateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this group create forbidden response has a 3xx status code
func (o *GroupCreateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this group create forbidden response has a 4xx status code
func (o *GroupCreateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this group create forbidden response has a 5xx status code
func (o *GroupCreateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this group create forbidden response a status code equal to that given
func (o *GroupCreateForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the group create forbidden response
func (o *GroupCreateForbidden) Code() int {
	return 403
}

func (o *GroupCreateForbidden) Error() string {
	return fmt.Sprintf("[POST /groups][%d] groupCreateForbidden ", 403)
}

func (o *GroupCreateForbidden) String() string {
	return fmt.Sprintf("[POST /groups][%d] groupCreateForbidden ", 403)
}

func (o *GroupCreateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGroupCreateUnsupportedMediaType creates a GroupCreateUnsupportedMediaType with default headers values
func NewGroupCreateUnsupportedMediaType() *GroupCreateUnsupportedMediaType {
	return &GroupCreateUnsupportedMediaType{}
}

/* GroupCreateUnsupportedMediaType describes a response with status code 415, with default header values.

GroupCreateUnsupportedMediaType group create unsupported media type
*/
type GroupCreateUnsupportedMediaType struct {
}

// IsSuccess returns true when this group create unsupported media type response has a 2xx status code
func (o *GroupCreateUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this group create unsupported media type response has a 3xx status code
func (o *GroupCreateUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this group create unsupported media type response has a 4xx status code
func (o *GroupCreateUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this group create unsupported media type response has a 5xx status code
func (o *GroupCreateUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this group create unsupported media type response a status code equal to that given
func (o *GroupCreateUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

// Code gets the status code for the group create unsupported media type response
func (o *GroupCreateUnsupportedMediaType) Code() int {
	return 415
}

func (o *GroupCreateUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /groups][%d] groupCreateUnsupportedMediaType ", 415)
}

func (o *GroupCreateUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /groups][%d] groupCreateUnsupportedMediaType ", 415)
}

func (o *GroupCreateUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
