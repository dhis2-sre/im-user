// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/dhis2-sre/im-user/swagger/sdk/models"
)

// MeReader is a Reader for the Me structure.
type MeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewMeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewMeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewMeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewMeUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewMeOK creates a MeOK with default headers values
func NewMeOK() *MeOK {
	return &MeOK{}
}

/*
MeOK describes a response with status code 200, with default header values.

User
*/
type MeOK struct {
	Payload *models.User
}

// IsSuccess returns true when this me o k response has a 2xx status code
func (o *MeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this me o k response has a 3xx status code
func (o *MeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this me o k response has a 4xx status code
func (o *MeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this me o k response has a 5xx status code
func (o *MeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this me o k response a status code equal to that given
func (o *MeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the me o k response
func (o *MeOK) Code() int {
	return 200
}

func (o *MeOK) Error() string {
	return fmt.Sprintf("[GET /me][%d] meOK  %+v", 200, o.Payload)
}

func (o *MeOK) String() string {
	return fmt.Sprintf("[GET /me][%d] meOK  %+v", 200, o.Payload)
}

func (o *MeOK) GetPayload() *models.User {
	return o.Payload
}

func (o *MeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMeUnauthorized creates a MeUnauthorized with default headers values
func NewMeUnauthorized() *MeUnauthorized {
	return &MeUnauthorized{}
}

/*
MeUnauthorized describes a response with status code 401, with default header values.

MeUnauthorized me unauthorized
*/
type MeUnauthorized struct {
}

// IsSuccess returns true when this me unauthorized response has a 2xx status code
func (o *MeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this me unauthorized response has a 3xx status code
func (o *MeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this me unauthorized response has a 4xx status code
func (o *MeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this me unauthorized response has a 5xx status code
func (o *MeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this me unauthorized response a status code equal to that given
func (o *MeUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the me unauthorized response
func (o *MeUnauthorized) Code() int {
	return 401
}

func (o *MeUnauthorized) Error() string {
	return fmt.Sprintf("[GET /me][%d] meUnauthorized ", 401)
}

func (o *MeUnauthorized) String() string {
	return fmt.Sprintf("[GET /me][%d] meUnauthorized ", 401)
}

func (o *MeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMeForbidden creates a MeForbidden with default headers values
func NewMeForbidden() *MeForbidden {
	return &MeForbidden{}
}

/*
MeForbidden describes a response with status code 403, with default header values.

MeForbidden me forbidden
*/
type MeForbidden struct {
}

// IsSuccess returns true when this me forbidden response has a 2xx status code
func (o *MeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this me forbidden response has a 3xx status code
func (o *MeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this me forbidden response has a 4xx status code
func (o *MeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this me forbidden response has a 5xx status code
func (o *MeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this me forbidden response a status code equal to that given
func (o *MeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the me forbidden response
func (o *MeForbidden) Code() int {
	return 403
}

func (o *MeForbidden) Error() string {
	return fmt.Sprintf("[GET /me][%d] meForbidden ", 403)
}

func (o *MeForbidden) String() string {
	return fmt.Sprintf("[GET /me][%d] meForbidden ", 403)
}

func (o *MeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMeNotFound creates a MeNotFound with default headers values
func NewMeNotFound() *MeNotFound {
	return &MeNotFound{}
}

/*
MeNotFound describes a response with status code 404, with default header values.

MeNotFound me not found
*/
type MeNotFound struct {
}

// IsSuccess returns true when this me not found response has a 2xx status code
func (o *MeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this me not found response has a 3xx status code
func (o *MeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this me not found response has a 4xx status code
func (o *MeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this me not found response has a 5xx status code
func (o *MeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this me not found response a status code equal to that given
func (o *MeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the me not found response
func (o *MeNotFound) Code() int {
	return 404
}

func (o *MeNotFound) Error() string {
	return fmt.Sprintf("[GET /me][%d] meNotFound ", 404)
}

func (o *MeNotFound) String() string {
	return fmt.Sprintf("[GET /me][%d] meNotFound ", 404)
}

func (o *MeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMeUnsupportedMediaType creates a MeUnsupportedMediaType with default headers values
func NewMeUnsupportedMediaType() *MeUnsupportedMediaType {
	return &MeUnsupportedMediaType{}
}

/*
MeUnsupportedMediaType describes a response with status code 415, with default header values.

MeUnsupportedMediaType me unsupported media type
*/
type MeUnsupportedMediaType struct {
}

// IsSuccess returns true when this me unsupported media type response has a 2xx status code
func (o *MeUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this me unsupported media type response has a 3xx status code
func (o *MeUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this me unsupported media type response has a 4xx status code
func (o *MeUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this me unsupported media type response has a 5xx status code
func (o *MeUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this me unsupported media type response a status code equal to that given
func (o *MeUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

// Code gets the status code for the me unsupported media type response
func (o *MeUnsupportedMediaType) Code() int {
	return 415
}

func (o *MeUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /me][%d] meUnsupportedMediaType ", 415)
}

func (o *MeUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /me][%d] meUnsupportedMediaType ", 415)
}

func (o *MeUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
