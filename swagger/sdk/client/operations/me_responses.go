// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/dhis2-sre/im-user/swagger/sdk/models"
)

// MeReader is a Reader for the Me structure.
type MeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewMeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewMeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewMeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewMeUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewMeOK creates a MeOK with default headers values
func NewMeOK() *MeOK {
	return &MeOK{}
}

/* MeOK describes a response with status code 200, with default header values.

User
*/
type MeOK struct {
	Payload *models.User
}

func (o *MeOK) Error() string {
	return fmt.Sprintf("[GET /me][%d] meOK  %+v", 200, o.Payload)
}
func (o *MeOK) GetPayload() *models.User {
	return o.Payload
}

func (o *MeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMeUnauthorized creates a MeUnauthorized with default headers values
func NewMeUnauthorized() *MeUnauthorized {
	return &MeUnauthorized{}
}

/* MeUnauthorized describes a response with status code 401, with default header values.

MeUnauthorized me unauthorized
*/
type MeUnauthorized struct {
}

func (o *MeUnauthorized) Error() string {
	return fmt.Sprintf("[GET /me][%d] meUnauthorized ", 401)
}

func (o *MeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMeForbidden creates a MeForbidden with default headers values
func NewMeForbidden() *MeForbidden {
	return &MeForbidden{}
}

/* MeForbidden describes a response with status code 403, with default header values.

MeForbidden me forbidden
*/
type MeForbidden struct {
}

func (o *MeForbidden) Error() string {
	return fmt.Sprintf("[GET /me][%d] meForbidden ", 403)
}

func (o *MeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMeNotFound creates a MeNotFound with default headers values
func NewMeNotFound() *MeNotFound {
	return &MeNotFound{}
}

/* MeNotFound describes a response with status code 404, with default header values.

MeNotFound me not found
*/
type MeNotFound struct {
}

func (o *MeNotFound) Error() string {
	return fmt.Sprintf("[GET /me][%d] meNotFound ", 404)
}

func (o *MeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMeUnsupportedMediaType creates a MeUnsupportedMediaType with default headers values
func NewMeUnsupportedMediaType() *MeUnsupportedMediaType {
	return &MeUnsupportedMediaType{}
}

/* MeUnsupportedMediaType describes a response with status code 415, with default header values.

MeUnsupportedMediaType me unsupported media type
*/
type MeUnsupportedMediaType struct {
}

func (o *MeUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /me][%d] meUnsupportedMediaType ", 415)
}

func (o *MeUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
