// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/dhis2-sre/im-user/swagger/sdk/models"
)

// SignInReader is a Reader for the SignIn structure.
type SignInReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SignInReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewSignInCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewSignInUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSignInForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSignInNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewSignInUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSignInCreated creates a SignInCreated with default headers values
func NewSignInCreated() *SignInCreated {
	return &SignInCreated{}
}

/*
SignInCreated describes a response with status code 201, with default header values.

SignInCreated sign in created
*/
type SignInCreated struct {
	Payload *models.Tokens
}

// IsSuccess returns true when this sign in created response has a 2xx status code
func (o *SignInCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this sign in created response has a 3xx status code
func (o *SignInCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sign in created response has a 4xx status code
func (o *SignInCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this sign in created response has a 5xx status code
func (o *SignInCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this sign in created response a status code equal to that given
func (o *SignInCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the sign in created response
func (o *SignInCreated) Code() int {
	return 201
}

func (o *SignInCreated) Error() string {
	return fmt.Sprintf("[POST /tokens][%d] signInCreated  %+v", 201, o.Payload)
}

func (o *SignInCreated) String() string {
	return fmt.Sprintf("[POST /tokens][%d] signInCreated  %+v", 201, o.Payload)
}

func (o *SignInCreated) GetPayload() *models.Tokens {
	return o.Payload
}

func (o *SignInCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Tokens)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSignInUnauthorized creates a SignInUnauthorized with default headers values
func NewSignInUnauthorized() *SignInUnauthorized {
	return &SignInUnauthorized{}
}

/*
SignInUnauthorized describes a response with status code 401, with default header values.

SignInUnauthorized sign in unauthorized
*/
type SignInUnauthorized struct {
}

// IsSuccess returns true when this sign in unauthorized response has a 2xx status code
func (o *SignInUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sign in unauthorized response has a 3xx status code
func (o *SignInUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sign in unauthorized response has a 4xx status code
func (o *SignInUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this sign in unauthorized response has a 5xx status code
func (o *SignInUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this sign in unauthorized response a status code equal to that given
func (o *SignInUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the sign in unauthorized response
func (o *SignInUnauthorized) Code() int {
	return 401
}

func (o *SignInUnauthorized) Error() string {
	return fmt.Sprintf("[POST /tokens][%d] signInUnauthorized ", 401)
}

func (o *SignInUnauthorized) String() string {
	return fmt.Sprintf("[POST /tokens][%d] signInUnauthorized ", 401)
}

func (o *SignInUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSignInForbidden creates a SignInForbidden with default headers values
func NewSignInForbidden() *SignInForbidden {
	return &SignInForbidden{}
}

/*
SignInForbidden describes a response with status code 403, with default header values.

SignInForbidden sign in forbidden
*/
type SignInForbidden struct {
}

// IsSuccess returns true when this sign in forbidden response has a 2xx status code
func (o *SignInForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sign in forbidden response has a 3xx status code
func (o *SignInForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sign in forbidden response has a 4xx status code
func (o *SignInForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this sign in forbidden response has a 5xx status code
func (o *SignInForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this sign in forbidden response a status code equal to that given
func (o *SignInForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the sign in forbidden response
func (o *SignInForbidden) Code() int {
	return 403
}

func (o *SignInForbidden) Error() string {
	return fmt.Sprintf("[POST /tokens][%d] signInForbidden ", 403)
}

func (o *SignInForbidden) String() string {
	return fmt.Sprintf("[POST /tokens][%d] signInForbidden ", 403)
}

func (o *SignInForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSignInNotFound creates a SignInNotFound with default headers values
func NewSignInNotFound() *SignInNotFound {
	return &SignInNotFound{}
}

/*
SignInNotFound describes a response with status code 404, with default header values.

SignInNotFound sign in not found
*/
type SignInNotFound struct {
}

// IsSuccess returns true when this sign in not found response has a 2xx status code
func (o *SignInNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sign in not found response has a 3xx status code
func (o *SignInNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sign in not found response has a 4xx status code
func (o *SignInNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this sign in not found response has a 5xx status code
func (o *SignInNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this sign in not found response a status code equal to that given
func (o *SignInNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the sign in not found response
func (o *SignInNotFound) Code() int {
	return 404
}

func (o *SignInNotFound) Error() string {
	return fmt.Sprintf("[POST /tokens][%d] signInNotFound ", 404)
}

func (o *SignInNotFound) String() string {
	return fmt.Sprintf("[POST /tokens][%d] signInNotFound ", 404)
}

func (o *SignInNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSignInUnsupportedMediaType creates a SignInUnsupportedMediaType with default headers values
func NewSignInUnsupportedMediaType() *SignInUnsupportedMediaType {
	return &SignInUnsupportedMediaType{}
}

/*
SignInUnsupportedMediaType describes a response with status code 415, with default header values.

SignInUnsupportedMediaType sign in unsupported media type
*/
type SignInUnsupportedMediaType struct {
}

// IsSuccess returns true when this sign in unsupported media type response has a 2xx status code
func (o *SignInUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sign in unsupported media type response has a 3xx status code
func (o *SignInUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sign in unsupported media type response has a 4xx status code
func (o *SignInUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this sign in unsupported media type response has a 5xx status code
func (o *SignInUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this sign in unsupported media type response a status code equal to that given
func (o *SignInUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

// Code gets the status code for the sign in unsupported media type response
func (o *SignInUnsupportedMediaType) Code() int {
	return 415
}

func (o *SignInUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /tokens][%d] signInUnsupportedMediaType ", 415)
}

func (o *SignInUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /tokens][%d] signInUnsupportedMediaType ", 415)
}

func (o *SignInUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
