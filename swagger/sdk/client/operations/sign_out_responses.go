// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// SignOutReader is a Reader for the SignOut structure.
type SignOutReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SignOutReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSignOutOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewSignOutUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewSignOutUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSignOutOK creates a SignOutOK with default headers values
func NewSignOutOK() *SignOutOK {
	return &SignOutOK{}
}

/*
SignOutOK describes a response with status code 200, with default header values.

SignOutOK sign out o k
*/
type SignOutOK struct {
}

// IsSuccess returns true when this sign out o k response has a 2xx status code
func (o *SignOutOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this sign out o k response has a 3xx status code
func (o *SignOutOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sign out o k response has a 4xx status code
func (o *SignOutOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this sign out o k response has a 5xx status code
func (o *SignOutOK) IsServerError() bool {
	return false
}

// IsCode returns true when this sign out o k response a status code equal to that given
func (o *SignOutOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the sign out o k response
func (o *SignOutOK) Code() int {
	return 200
}

func (o *SignOutOK) Error() string {
	return fmt.Sprintf("[DELETE /users][%d] signOutOK ", 200)
}

func (o *SignOutOK) String() string {
	return fmt.Sprintf("[DELETE /users][%d] signOutOK ", 200)
}

func (o *SignOutOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSignOutUnauthorized creates a SignOutUnauthorized with default headers values
func NewSignOutUnauthorized() *SignOutUnauthorized {
	return &SignOutUnauthorized{}
}

/*
SignOutUnauthorized describes a response with status code 401, with default header values.

SignOutUnauthorized sign out unauthorized
*/
type SignOutUnauthorized struct {
}

// IsSuccess returns true when this sign out unauthorized response has a 2xx status code
func (o *SignOutUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sign out unauthorized response has a 3xx status code
func (o *SignOutUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sign out unauthorized response has a 4xx status code
func (o *SignOutUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this sign out unauthorized response has a 5xx status code
func (o *SignOutUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this sign out unauthorized response a status code equal to that given
func (o *SignOutUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the sign out unauthorized response
func (o *SignOutUnauthorized) Code() int {
	return 401
}

func (o *SignOutUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /users][%d] signOutUnauthorized ", 401)
}

func (o *SignOutUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /users][%d] signOutUnauthorized ", 401)
}

func (o *SignOutUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSignOutUnsupportedMediaType creates a SignOutUnsupportedMediaType with default headers values
func NewSignOutUnsupportedMediaType() *SignOutUnsupportedMediaType {
	return &SignOutUnsupportedMediaType{}
}

/*
SignOutUnsupportedMediaType describes a response with status code 415, with default header values.

SignOutUnsupportedMediaType sign out unsupported media type
*/
type SignOutUnsupportedMediaType struct {
}

// IsSuccess returns true when this sign out unsupported media type response has a 2xx status code
func (o *SignOutUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sign out unsupported media type response has a 3xx status code
func (o *SignOutUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sign out unsupported media type response has a 4xx status code
func (o *SignOutUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this sign out unsupported media type response has a 5xx status code
func (o *SignOutUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this sign out unsupported media type response a status code equal to that given
func (o *SignOutUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

// Code gets the status code for the sign out unsupported media type response
func (o *SignOutUnsupportedMediaType) Code() int {
	return 415
}

func (o *SignOutUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[DELETE /users][%d] signOutUnsupportedMediaType ", 415)
}

func (o *SignOutUnsupportedMediaType) String() string {
	return fmt.Sprintf("[DELETE /users][%d] signOutUnsupportedMediaType ", 415)
}

func (o *SignOutUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
