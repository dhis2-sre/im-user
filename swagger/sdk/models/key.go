// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Key Key defines the minimal interface for each of the
// key types. Their use and implementation differ significantly
// between each key types, so you should use type assertions
// to perform more specific tasks with each key
//
// swagger:model Key
type Key struct {

	// algorithm
	Algorithm string `json:"Algorithm,omitempty"`

	// key ID
	KeyID string `json:"KeyID,omitempty"`

	// key ops
	KeyOps KeyOperationList `json:"KeyOps,omitempty"`

	// key type
	KeyType KeyType `json:"KeyType,omitempty"`

	// key usage
	KeyUsage string `json:"KeyUsage,omitempty"`

	// PrivateParams returns the non-standard elements in the source structure
	// WARNING: DO NOT USE PrivateParams() IF YOU HAVE CONCURRENT CODE ACCESSING THEM.
	// Use `AsMap()` to get a copy of the entire header, or use `Iterate()` instead
	PrivateParams map[string]interface{} `json:"PrivateParams,omitempty"`

	// x509 cert chain
	X509CertChain []*Certificate `json:"X509CertChain"`

	// x509 cert thumbprint
	X509CertThumbprint string `json:"X509CertThumbprint,omitempty"`

	// x509 cert thumbprint s256
	X509CertThumbprintS256 string `json:"X509CertThumbprintS256,omitempty"`

	// x509 URL
	X509URL string `json:"X509URL,omitempty"`
}

// Validate validates this key
func (m *Key) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKeyOps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateX509CertChain(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Key) validateKeyOps(formats strfmt.Registry) error {
	if swag.IsZero(m.KeyOps) { // not required
		return nil
	}

	if err := m.KeyOps.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("KeyOps")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("KeyOps")
		}
		return err
	}

	return nil
}

func (m *Key) validateKeyType(formats strfmt.Registry) error {
	if swag.IsZero(m.KeyType) { // not required
		return nil
	}

	if err := m.KeyType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("KeyType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("KeyType")
		}
		return err
	}

	return nil
}

func (m *Key) validateX509CertChain(formats strfmt.Registry) error {
	if swag.IsZero(m.X509CertChain) { // not required
		return nil
	}

	for i := 0; i < len(m.X509CertChain); i++ {
		if swag.IsZero(m.X509CertChain[i]) { // not required
			continue
		}

		if m.X509CertChain[i] != nil {
			if err := m.X509CertChain[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("X509CertChain" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("X509CertChain" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this key based on the context it is used
func (m *Key) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateKeyOps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeyType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateX509CertChain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Key) contextValidateKeyOps(ctx context.Context, formats strfmt.Registry) error {

	if err := m.KeyOps.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("KeyOps")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("KeyOps")
		}
		return err
	}

	return nil
}

func (m *Key) contextValidateKeyType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.KeyType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("KeyType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("KeyType")
		}
		return err
	}

	return nil
}

func (m *Key) contextValidateX509CertChain(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.X509CertChain); i++ {

		if m.X509CertChain[i] != nil {
			if err := m.X509CertChain[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("X509CertChain" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("X509CertChain" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Key) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Key) UnmarshalBinary(b []byte) error {
	var res Key
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
